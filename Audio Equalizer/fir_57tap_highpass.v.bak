module fir_57tap_highpass (
    input  wire              clk,
    input  wire signed [15:0] data_in,
    output reg  signed [15:0] data_out
);

    // Hệ số FIR (fixed-point Q1.14, nhân với 16384)
    reg signed [15:0] coeffs [0:56];
    initial begin
        coeffs[0]  = 4;    // 0.000220 * 16384
        coeffs[1]  = 6;    // 0.000376 * 16384
        coeffs[2]  = 6;    // 0.000358 * 16384
        coeffs[3]  = 0;    // -0.000000 * 16384
        coeffs[4]  = -12;  // -0.000723 * 16384
        coeffs[5]  = -26;  // -0.001573 * 16384
        coeffs[6]  = -34;  // -0.002065 * 16384
        coeffs[7]  = -27;  // -0.001641 * 16384
        coeffs[8]  = 0;    // -0.000000 * 16384
        coeffs[9]  = 42;   // 0.002590 * 16384
        coeffs[10] = 85;   // 0.005165 * 16384
        coeffs[11] = 103;  // 0.006302 * 16384
        coeffs[12] = 77;   // 0.004713 * 16384
        coeffs[13] = 0;    // -0.000000 * 16384
        coeffs[14] = -111; // -0.006764 * 16384
        coeffs[15] = -213; // -0.013014 * 16384
        coeffs[16] = -253; // -0.015429 * 16384
        coeffs[17] = -185; // -0.011286 * 16384
        coeffs[18] = 0;    // -0.000000 * 16384
        coeffs[19] = 259;  // 0.015851 * 16384
        coeffs[20] = 501;  // 0.030577 * 16384
        coeffs[21] = 602;  // 0.036762 * 16384
        coeffs[22] = 453;  // 0.027687 * 16384
        coeffs[23] = 0;    // -0.000000 * 16384
        coeffs[24] = -726; // -0.044380 * 16384
        coeffs[25] = -1602;// -0.097977 * 16384
        coeffs[26] = -2449;// -0.149397 * 16384
        coeffs[27] = -3040;// -0.186487 * 16384
        coeffs[28] = 1315; // 0.800000 * 16384
        coeffs[29] = -3040;// -0.186487 * 16384
        coeffs[30] = -2449;// -0.149397 * 16384
        coeffs[31] = -1602;// -0.097977 * 16384
        coeffs[32] = -726; // -0.044380 * 16384
        coeffs[33] = 0;    // -0.000000 * 16384
        coeffs[34] = 453;  // 0.027687 * 16384
        coeffs[35] = 602;  // 0.036762 * 16384
        coeffs[36] = 501;  // 0.030577 * 16384
        coeffs[37] = 259;  // 0.015851 * 16384
        coeffs[38] = 0;    // -0.000000 * 16384
        coeffs[39] = -185; // -0.011286 * 16384
        coeffs[40] = -253; // -0.015429 * 16384
        coeffs[41] = -213; // -0.013014 * 16384
        coeffs[42] = -111; // -0.006764 * 16384
        coeffs[43] = 0;    // -0.000000 * 16384
        coeffs[44] = 77;   // 0.004713 * 16384
        coeffs[45] = 103;  // 0.006302 * 16384
        coeffs[46] = 85;   // 0.005165 * 16384
        coeffs[47] = 42;   // 0.002590 * 16384
        coeffs[48] = 0;    // -0.000000 * 16384
        coeffs[49] = -27;  // -0.001641 * 16384
        coeffs[50] = -34;  // -0.002065 * 16384
        coeffs[51] = -26;  // -0.001573 * 16384
        coeffs[52] = -12;  // -0.000723 * 16384
        coeffs[53] = 0;    // -0.000000 * 16384
        coeffs[54] = 6;    // 0.000358 * 16384
        coeffs[55] = 6;    // 0.000376 * 16384
        coeffs[56] = 4;    // 0.000220 * 16384
    end

    // Dãy mẫu đầu vào
    reg signed [15:0] x_reg [0:56];

    // Biến dùng trong xử lý
    integer i;
    reg signed [31:0] acc;

    always @(posedge clk) begin
        // Dịch dữ liệu
        for (i = 56; i > 0; i = i - 1)
            x_reg[i] <= x_reg[i - 1];
        x_reg[0] <= data_in;

        // Tính tích chập
        acc = 0;
        for (i = 0; i < 57; i = i + 1)
            acc = acc + x_reg[i] * coeffs[i];

        // Chia lại độ lớn (chuẩn Q1.14)
        data_out <= acc >>> 14;
    end

endmodule
